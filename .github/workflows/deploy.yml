# .github/workflows/deploy-fastapi.yml
name: Deploy FastAPI to Server

on:
  push:
    branches: [ main ]

env:
  # DockerHub 유저명/레포:태그 형식
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/my-fastapi-app:latest
  # 원격 서버에서 사용할 컨테이너 이름
  CONTAINER_NAME: fastapi-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 리포지토리 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Docker Buildx 설치
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3) Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t "$IMAGE_NAME" .

      # 4) DockerHub 로그인
      - name: Login to DockerHub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" \
            | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 5) 이미지 푸시
      - name: Push Docker image
        run: |
          docker push "$IMAGE_NAME"

      # 6) 원격 서버에 SSH 배포
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host:     ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key:      ${{ secrets.SSH_PRIVATE_KEY }}
          port:     22
          envs: |
            IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/my-fastapi-app:latest
            CONTAINER_NAME=fastapi-app
          script: |
            # 최신 이미지 내려받기
            docker pull "$IMAGE_NAME"

            # 기존 컨테이너 중지·삭제
            docker stop "$CONTAINER_NAME" || true
            docker rm   "$CONTAINER_NAME" || true

            # 새 컨테이너 실행
            docker run -d \
              --name "$CONTAINER_NAME" \
              -p 9000:9000 \
              --env-file /home/${{ secrets.SERVER_USER }}/project/fastapi/.env \
              "$IMAGE_NAME"
