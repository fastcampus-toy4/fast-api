# .github/workflows/deploy-fastapi.yml
name: Deploy FastAPI to Server

on:
  push:
    branches: [ main ]

env:
  # DockerHub 리포지터리/태그
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/my-fastapi-app:latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Docker Buildx 설치
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3) Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t "$IMAGE_NAME" .

      # 4) DockerHub 로그인
      - name: Login to DockerHub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" \
            | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 5) 이미지 푸시
      - name: Push Docker image
        run: |
          docker push "$IMAGE_NAME"

      # 6) 원격 서버에 SSH 배포
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host:     ${{ secrets.SERVER_IP }}
          username: ubuntu
          key:      ${{ secrets.SSH_PRIVATE_KEY }}
          port:     22
          script: |
            # DockerHub 로그인 (서버 측)
            echo "${{ secrets.DOCKER_PASSWORD }}" \
              | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # 기존 컨테이너 강제 삭제
            sudo docker rm -f fastapi-app || true

            # 최신 이미지 내려받기
            sudo docker pull ${{ env.IMAGE_NAME }}

            # 새 컨테이너 실행
            sudo docker run -d \
              --name fastapi-app \
              -p 9000:9000 \
              --env-file /home/ubuntu/project/fastapi/.env \
              ${{ env.IMAGE_NAME }}
